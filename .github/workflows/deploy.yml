name: CI

on:
  push:
    branches: [ master, dev ]
env:
  MASTER_BRANCH: "master"

jobs:
  ci:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: set env BUILD_BRANCH
        run: echo "BUILD_BRANCH=$(echo $GITHUB_REF | sed 's:refs/heads/::')" >> $GITHUB_ENV

      - name: set branch prefix env to be used during docker build, .e.g. "refs/heads/testnet" => ".testnet"
        if: env.BUILD_BRANCH != 'master'
        run: echo "BUILD_BRANCH_ENV_PREFIX=$(echo .$BUILD_BRANCH)" >> $GITHUB_ENV

      - name: set env PROJECT_NAME
        run: echo "PROJECT_NAME=$(echo $GITHUB_REPOSITORY | sed "s:MinterTeam/::")" >> $GITHUB_ENV
      
      - uses: actions/checkout@v2
      - name: build and push docker image
        uses: opspresso/action-docker@master
        env:
          USERNAME: ${{ secrets.MINTER_REGISTRY_USERNAME }}
          PASSWORD: ${{ secrets.MINTER_REGISTRY_PASSWORD }}
          REGISTRY: "registry.minter.network"
          IMAGE_NAME: ${{ env.PROJECT_NAME }}
          LATEST: "true"
          TAG_NAME: ${{ github.sha }}
          DOCKERFILE: ".docker/Dockerfile"
          DOCKER_BUILD_ARGS: --build-arg BUILD_BRANCH_ENV_PREFIX

      - name: DigitalOcean Kubernetes
        if: env.BUILD_BRANCH == env.MASTER_BRANCH
        uses: matootie/dokube@v1.3.2
        with:
          personalAccessToken: ${{ secrets.DIGITALOCEAN_TOKEN }}
          clusterName: k8s-prod-do
      
      - name: Install helm
        if: env.BUILD_BRANCH == env.MASTER_BRANCH
        run: wget https://get.helm.sh/helm-v3.3.4-linux-amd64.tar.gz &> /dev/null && tar xvzf helm-v3.3.4-linux-amd64.tar.gz && chmod 777 linux-amd64/helm && ./linux-amd64/helm ls -n minter-org

      - name: Deploy to DO
        if: env.BUILD_BRANCH == env.MASTER_BRANCH
        env:
          TAG_NAME: ${{ github.sha }}
        run: ./linux-amd64/helm upgrade -n minter-org -i $PROJECT_NAME chart/ --atomic --timeout 100s --set image.tag=$TAG_NAME --set ingress.clusterissuer=letsencrypt-prod

      - name: deploy to production cluster
        if: env.BUILD_BRANCH == env.MASTER_BRANCH
        uses: wahyd4/kubectl-helm-action@master
        env:
          TAG_NAME: ${{ github.sha }}
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_PROD_CONFIG_DATA }}
        with:
          args: helm upgrade -i ${{ env.PROJECT_NAME }} chart/ --atomic --timeout 100s --set image.tag=$TAG_NAME --set ingress.clusterissuer=letsencrypt-prod

      - name: deploy to staging cluster
        if: env.BUILD_BRANCH != env.MASTER_BRANCH
        uses: wahyd4/kubectl-helm-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_STAGE_CONFIG_DATA }}
          TAG_NAME: ${{ github.sha }}
        with:
          args: helm upgrade -i ${{ env.PROJECT_NAME }} chart/ --atomic --timeout 100s --set image.tag=$TAG_NAME --set ingress.domain=minter-org.kubernetes.icu --set ingress.tlsname=wildcard --set ingress.issuer=letsencrypt-http

      - name: notification
        if: cancelled() == false
        uses: xinthink/action-telegram@v1.1
        with:
          botToken: ${{ secrets.TELEGRAM_CI_TOKEN }}
          chatId: ${{ secrets.TELEGRAM_CI_TO }}
          jobStatus: ${{ job.status }}
          skipSuccess: false
