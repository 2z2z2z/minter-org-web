name: CI

on:
  push:
    branches: [ master, dev ]

jobs:
  ci:
    name: build
    runs-on: ubuntu-latest
    steps:
      - name: set branch prefix env to be used during docker build, .e.g. "refs/heads/testnet" => ".testnet"
        if: github.ref != 'refs/heads/master'
        run: echo "BUILD_BRANCH_ENV_PREFIX=$(echo "$GITHUB_REF" | sed "s\refs/heads/\.\g")" >> $GITHUB_ENV

      - name: set env PROJECT_NAME
        run: echo "PROJECT_NAME=$(echo "$GITHUB_REPOSITORY" | sed "s:MinterTeam/::")" >> $GITHUB_ENV
  
      - name: debug
        run: echo "$PROJECT_NAME"; echo "$GITHUB_REPOSITORY"; echo "$GITHUB_REPOSITORY" | sed "s:MinterTeam/::"
        
      - name: debug 2
        run: echo ${{ env.PROJECT_NAME }}
      
      - uses: actions/checkout@v2
      - name: build and push to registry
        uses: opspresso/action-docker@master
        env:
          USERNAME: ${{ secrets.MINTER_REGISTRY_USERNAME }}
          PASSWORD: ${{ secrets.MINTER_REGISTRY_PASSWORD }}
          REGISTRY: "registry.minter.network"
          IMAGE_NAME: ${{ env.PROJECT_NAME }}
          LATEST: "true"
          TAG_NAME: ${{ github.sha }}
          DOCKERFILE: ".docker/Dockerfile"
          DOCKER_BUILD_ARGS: --build-arg BUILD_BRANCH_ENV_PREFIX
    
      - name: deploy to production cluster
        if: github.ref == 'refs/heads/master'
        uses: wahyd4/kubectl-helm-action@master
        env:
          TAG_NAME: ${{ github.sha }}
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_PROD_CONFIG_DATA }}
        with:
          args: helm upgrade -i ${{ env.PROJECT_NAME }} chart/ --atomic --timeout 100s --set image.tag=$TAG_NAME
  
      - name: deploy to staging cluster
        if: github.ref != 'refs/heads/master'
        uses: wahyd4/kubectl-helm-action@master
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_STAGE_CONFIG_DATA }}
          TAG_NAME: ${{ github.sha }}
        with:
          args: helm upgrade -i ${{ env.PROJECT_NAME }} chart/ --atomic --timeout 100s --set image.tag=$TAG_NAME --set ingress.domain=minter-org.kubernetes.icu --set ingress.tlsname=wildcard

      - name: notification
        if: cancelled() == false
        uses: xinthink/action-telegram@v1.1
        with:
          botToken: ${{ secrets.TELEGRAM_CI_TOKEN }}
          chatId: ${{ secrets.TELEGRAM_CI_TO }}
          jobStatus: ${{ job.status }}
          skipSuccess: false
